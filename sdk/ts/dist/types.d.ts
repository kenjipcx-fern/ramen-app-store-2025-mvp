/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    "/auth/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sign up with email/phone */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SignupEmailRequest"] | components["schemas"]["SignupPhoneRequest"];
                };
            };
            responses: {
                /** @description Account created; may require OTP verification */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AuthBootstrap"];
                    };
                };
                400: components["responses"]["BadRequest"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login with email/phone/password or OTP, or SSO */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["LoginPasswordRequest"] | components["schemas"]["LoginOtpRequest"] | components["schemas"]["LoginSsoRequest"];
                };
            };
            responses: {
                /** @description Tokens issued */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AuthTokens"];
                    };
                };
                401: components["responses"]["Unauthorized"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh access token */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        refresh_token?: string;
                    };
                };
            };
            responses: {
                /** @description New access token */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AuthTokens"];
                    };
                };
                401: components["responses"]["Unauthorized"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get my profile */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Profile */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
            };
        };
        /** Update my profile */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UserUpdate"];
                };
            };
            responses: {
                200: components["responses"]["Ok"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/preferences": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get taste/preferences */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Preferences"];
                    };
                };
            };
        };
        /** Update taste/preferences */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Preferences"];
                };
            };
            responses: {
                200: components["responses"]["Ok"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/addresses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List addresses */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Address"][];
                    };
                };
            };
        };
        put?: never;
        /** Add address */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AddressCreate"];
                };
            };
            responses: {
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Address"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/addresses/{addressId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete address */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    addressId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Deleted */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/payment-methods": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List payment methods (tokens) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PaymentMethod"][];
                    };
                };
            };
        };
        put?: never;
        /** Attach payment method via Stripe SetupIntent */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PaymentMethodAttachRequest"];
                };
            };
            responses: {
                201: components["responses"]["Created"];
            };
        };
        /** Detach a payment method */
        delete: {
            parameters: {
                query: {
                    payment_method_id: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Detached */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/restaurants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search restaurants */
        get: {
            parameters: {
                query: {
                    lat: number;
                    lng: number;
                    filters?: {
                        [key: string]: unknown;
                    };
                    sort?: "overall" | "texture" | "flavor" | "temp" | "distance";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RestaurantCard"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/restaurants/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get restaurant details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Restaurant"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/restaurants/{id}/menu": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get restaurant menu */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Menu"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/favorites/{restaurantId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Favorite a restaurant */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    restaurantId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Favorited */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /** Unfavorite a restaurant */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    restaurantId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Unfavorited */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a cart */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CartCreateRequest"];
                };
            };
            responses: {
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Cart"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cart/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Add/update/delete items */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CartItemsUpdateRequest"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Cart"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/checkout/quote": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get fees/taxes/ETA quote for current cart */
        get: {
            parameters: {
                query: {
                    cart_id: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Quote"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/checkout/submit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit checkout; create order and authorize payment */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CheckoutSubmitRequest"];
                };
            };
            responses: {
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CheckoutSubmitResponse"];
                    };
                };
                402: components["responses"]["PaymentRequired"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List my orders */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Order"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get order */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Order"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cancel an order (within allowed windows) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        reason?: string;
                    };
                };
            };
            responses: {
                200: components["responses"]["Ok"];
                409: components["responses"]["Conflict"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{id}/tracking": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Real-time tracking snapshot */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Tracking"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{id}/review": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit a review for an order */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ReviewCreate"];
                };
            };
            responses: {
                201: components["responses"]["Created"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/restaurants/{id}/reviews": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List reviews for a restaurant */
        get: {
            parameters: {
                query?: {
                    facet?: "overall" | "texture" | "flavor_balance" | "temp_on_arrival" | "packaging";
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Review"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/owner/restaurants/{id}/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get owner settings */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Ok"];
            };
        };
        /** Update owner settings */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["OwnerSettings"];
                };
            };
            responses: {
                200: components["responses"]["Ok"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/owner/restaurants/{id}/menu": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get draft menu */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Menu"];
                    };
                };
            };
        };
        /** Publish menu */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        publish?: boolean;
                    };
                };
            };
            responses: {
                200: components["responses"]["Ok"];
            };
        };
        /** Create/update draft menu */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Menu"];
                };
            };
            responses: {
                200: components["responses"]["Ok"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/owner/restaurants/{id}/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List live orders (queue) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Order"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/owner/restaurants/{id}/orders/{orderId}/actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Take action on order (mark ready, refire item, 86 item, print) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                    orderId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["OwnerOrderAction"];
                };
            };
            responses: {
                200: components["responses"]["Ok"];
                409: components["responses"]["Conflict"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payments/tip-adjust": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Adjust tip after delivery within window */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["TipAdjustRequest"];
                };
            };
            responses: {
                200: components["responses"]["Ok"];
                400: components["responses"]["BadRequest"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payments/refund": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refund or partial refund */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RefundRequest"];
                };
            };
            responses: {
                200: components["responses"]["Ok"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks/stripe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Stripe webhook endpoint */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                200: components["responses"]["Ok"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks/doordash": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** DoorDash Drive webhook endpoint */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                200: components["responses"]["Ok"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks/uber-direct": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Uber Direct webhook endpoint */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                200: components["responses"]["Ok"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ApiOk: {
            /** @example ok */
            status?: string;
        };
        ApiError: {
            /** @example AUTH_OTP_INVALID */
            error_code?: string;
            message?: string;
            details?: {
                [key: string]: unknown;
            };
        };
        AuthTokens: {
            access_token?: string;
            refresh_token?: string;
            /** @example 3600 */
            expires_in?: number;
            /** @example Bearer */
            token_type?: string;
        };
        AuthBootstrap: {
            user?: components["schemas"]["User"];
            tokens?: components["schemas"]["AuthTokens"];
            /** @description If true, client should complete OTP/SSO link */
            requires_verification?: boolean;
        };
        User: {
            id?: string;
            /** Format: email */
            email?: string;
            phone?: string;
            name?: string;
            /** @enum {string} */
            role?: "customer" | "owner" | "manager" | "staff";
            /** Format: date-time */
            created_at?: string;
        };
        UserUpdate: {
            name?: string;
            marketing_opt_in?: boolean;
        };
        Preferences: {
            /** @enum {string} */
            noodle_firmness?: "soft" | "regular" | "hard" | "extra_hard";
            spice_level?: number;
            /** @enum {string} */
            oil_richness?: "light" | "regular" | "rich";
            /** @enum {string} */
            broth_temperature?: "hot" | "extra_hot";
            dietary?: ("none" | "vegetarian" | "vegan" | "halal")[];
        };
        Address: {
            id?: string;
            /** @example Home */
            label?: string;
            line1?: string;
            line2?: string;
            city?: string;
            state?: string;
            postal_code?: string;
            /** @example US */
            country?: string;
            lat?: number;
            lng?: number;
            delivery_available?: boolean;
        };
        AddressCreate: WithRequired<components["schemas"]["Address"], "line1" | "city" | "state" | "postal_code" | "country" | "lat" | "lng">;
        PaymentMethod: {
            id?: string;
            /** @example visa */
            brand?: string;
            /** @example 4242 */
            last4?: string;
            exp_month?: number;
            exp_year?: number;
            is_default?: boolean;
        };
        PaymentMethodAttachRequest: {
            setup_intent_client_secret?: string;
        };
        RestaurantCard: {
            id?: string;
            name?: string;
            distance_km?: number;
            eta_minutes?: number;
            supports_separation?: boolean;
            firmness_options?: string[];
            ratings?: {
                /** Format: float */
                overall?: number;
                /** Format: float */
                texture?: number;
                /** Format: float */
                flavor?: number;
                /** Format: float */
                temp?: number;
            };
        };
        Restaurant: {
            id?: string;
            name?: string;
            description?: string;
            hours?: {
                [key: string]: unknown;
            };
            location?: {
                lat?: number;
                lng?: number;
            };
            supports_separation?: boolean;
            firmness_options?: string[];
            facet_ratings?: components["schemas"]["RestaurantCard"]["ratings"];
        };
        Menu: {
            categories?: {
                id?: string;
                name?: string;
                items?: components["schemas"]["MenuItem"][];
            }[];
        };
        MenuItem: {
            id?: string;
            name?: string;
            description?: string;
            price?: number;
            photo_url?: string;
            allergens?: string[];
            base?: {
                broth?: string;
                noodles?: string;
                tare?: string;
            };
            modifier_groups?: components["schemas"]["ModifierGroup"][];
        };
        ModifierGroup: {
            id?: string;
            name?: string;
            min?: number;
            max?: number;
            options?: components["schemas"]["Modifier"][];
        };
        Modifier: {
            id?: string;
            name?: string;
            price_delta?: number;
            available?: boolean;
        };
        CartCreateRequest: {
            restaurant_id?: string;
            address_id?: string;
        };
        CartItemsUpdateRequest: {
            cart_id?: string;
            operations?: {
                /** @enum {string} */
                op?: "add" | "update" | "remove";
                item?: components["schemas"]["CartLineItem"];
            }[];
        };
        CartLineItem: {
            menu_item_id?: string;
            quantity?: number;
            /** @default true */
            separation: boolean;
            modifiers?: components["schemas"]["SelectedModifier"][];
        };
        SelectedModifier: {
            modifier_group_id?: string;
            modifier_id?: string;
        };
        Cart: {
            id?: string;
            restaurant_id?: string;
            items?: components["schemas"]["CartLineItem"][];
            subtotal?: number;
            fees?: components["schemas"]["Fees"];
            tax?: number;
            tip?: number;
            total?: number;
        };
        Fees: {
            delivery?: number;
            /** @example 0.75 */
            separation?: number;
        };
        Quote: {
            cart_id?: string;
            fees?: components["schemas"]["Fees"];
            tax?: number;
            /** @example [
             *       0.12,
             *       0.15,
             *       0.18
             *     ] */
            tip_suggestions?: number[];
            eta_minutes_p50?: number;
            eta_minutes_p90?: number;
        };
        CheckoutSubmitRequest: {
            cart_id?: string;
            payment_method_id?: string;
            tip?: number;
            /** Format: date-time */
            schedule_time?: string | null;
        };
        CheckoutSubmitResponse: {
            order?: components["schemas"]["Order"];
            stripe_client_secret?: string | null;
        };
        Order: {
            id?: string;
            user_id?: string;
            restaurant_id?: string;
            /** @enum {string} */
            status?: "CREATED" | "PAYMENT_AUTH_PENDING" | "CONFIRMED" | "PREPARING" | "READY_FOR_PICKUP" | "DRIVER_ASSIGNED" | "PICKED_UP" | "ARRIVING" | "DELIVERED" | "CANCELED" | "FAILED" | "PARTIALLY_REFUNDED" | "REFUNDED";
            items?: components["schemas"]["OrderItem"][];
            fees?: components["schemas"]["Fees"];
            tax?: number;
            tip?: number;
            total?: number;
            /** Format: date-time */
            schedule_time?: string | null;
            /** Format: date-time */
            created_at?: string;
        };
        OrderItem: {
            menu_item_id?: string;
            name?: string;
            quantity?: number;
            separation?: boolean;
            modifiers?: components["schemas"]["SelectedModifier"][];
        };
        Tracking: {
            order_id?: string;
            status?: components["schemas"]["Order"]["status"];
            driver?: {
                assigned?: boolean;
                eta_minutes?: number;
                location?: {
                    lat?: number;
                    lng?: number;
                } | null;
            };
        };
        ReviewCreate: {
            overall?: number;
            texture?: number;
            flavor_balance?: number;
            temp_on_arrival?: number;
            packaging?: number;
            photos?: string[];
            issue_tags?: ("soggy" | "cold" | "spillage" | "wrong_toppings")[];
        };
        Review: components["schemas"]["ReviewCreate"] & {
            id?: string;
            restaurant_id?: string;
            order_id?: string;
            /** Format: date-time */
            created_at?: string;
        };
        OwnerSettings: {
            hours?: {
                [key: string]: unknown;
            };
            prep_sla_minutes?: number;
            /** @default true */
            separation_default: boolean;
            labels_template?: string;
        };
        OwnerOrderAction: {
            /** @enum {string} */
            type?: "mark_ready" | "refire_item" | "item_86" | "print_ticket" | "pause_orders" | "unpause_orders";
            payload?: {
                [key: string]: unknown;
            };
        };
        TipAdjustRequest: {
            order_id?: string;
            new_tip?: number;
        };
        RefundRequest: {
            order_id?: string;
            amount?: number;
            reason?: string;
        };
        SignupEmailRequest: {
            /** Format: email */
            email?: string;
            /** Format: password */
            password?: string;
        };
        SignupPhoneRequest: {
            phone?: string;
            otp?: string;
        };
        LoginPasswordRequest: {
            /** Format: email */
            email?: string;
            /** Format: password */
            password?: string;
        };
        LoginOtpRequest: {
            phone?: string;
            otp?: string;
        };
        LoginSsoRequest: {
            /** @enum {string} */
            provider?: "apple" | "google";
            id_token?: string;
        };
    };
    responses: {
        /** @description OK */
        Ok: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ApiOk"];
            };
        };
        /** @description Created */
        Created: {
            headers: {
                /** @description URI of created resource */
                Location?: string;
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Invalid request */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ApiError"];
            };
        };
        /** @description Unauthorized */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ApiError"];
            };
        };
        /** @description Conflict due to state or idempotency */
        Conflict: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ApiError"];
            };
        };
        /** @description Payment authorization required/failed */
        PaymentRequired: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ApiError"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
type WithRequired<T, K extends keyof T> = T & {
    [P in K]-?: T[P];
};
export type operations = Record<string, never>;
export {};
